type Profile @entity {
  id: ID!
  creator: Bytes!
  _to: Bytes!
  handle: String!
  imageURI: String!
  followNFTURI: String!
  followModule: Bytes!
  followModuleReturnData: Bytes!
  totalComments: BigInt!
  totalPosts: BigInt!
  posts: [Post!]@derivedFrom(field: "profileId")
  comments: [CommentCreated!]@derivedFrom(field: "profileId")
  mirrors: [Mirror!]@derivedFrom(field: "profileId")
  dispatcher: DispatcherSet
  dateCreated: BigInt!
}

type ProfileWhitelist @entity {
  id: Bytes!
  creator: Bytes!
  whitelisted: Boolean!
  date: BigInt!
}

type Post @entity {
  id: Bytes!
  profileId: Profile!
  pubId: BigInt!
  contentURI: String!
  collectModule: Bytes!
  collectModuleReturnData: Bytes!
  referenceModule: Bytes!
  referenceModuleReturnData: Bytes!
  datePosted: BigInt!
}

type Mirror @entity {
  id: Bytes!
  profileId: Profile!
  pubId: BigInt!
  profileIdPointed: BigInt!
  pubIdPointed: BigInt!
  referenceModule: Bytes!
  referenceModuleReturnData: Bytes!
  dateCreated: BigInt!
}

type CommentCreated @entity(immutable: true) {
  id: Bytes!
  profileId: Profile! # uint256
  pubId: BigInt! # uint256
  contentURI: String! # string
  profileIdPointed: BigInt! # uint256
  pubIdPointed: BigInt! # uint256
  referenceModuleData: Bytes! # bytes
  collectModule: Bytes! # address
  collectModuleReturnData: Bytes! # bytes
  referenceModule: Bytes! # address
  referenceModuleReturnData: Bytes! # bytes
  timestamp: BigInt! # uint256
  transactionHash: Bytes!
}

type DispatcherSet @entity(immutable: true) {
  id: Bytes!
  profileId: Profile! # uint256
  dispatcher: Bytes! # address
  timestamp: BigInt! # uint256
  transactionHash: Bytes!
}


type FollowModuleSet @entity(immutable: true) {
  id: Bytes!
  profileId: Profile! # uint256
  followModule: Bytes! # address
  followModuleReturnData: Bytes! # bytes
  timestamp: BigInt! # uint256
  transactionHash: Bytes!
}

# type FollowModuleWhitelisted @entity(immutable: true) {
#   id: Bytes!
#   followModule: Bytes! # address
#   whitelisted: Boolean! # bool
#   timestamp: BigInt! # uint256
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type FollowNFTDelegatedPowerChanged @entity(immutable: true) {
#   id: Bytes!
#   delegate: Bytes! # address
#   newPower: BigInt! # uint256
#   timestamp: BigInt! # uint256
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

# type FollowNFTDeployed @entity(immutable: true) {
#   id: Bytes!
#   profileId: BigInt! # uint256
#   followNFT: Bytes! # address
#   timestamp: BigInt! # uint256
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

type FollowNFTTransferred @entity(immutable: true) {
  id: Bytes!
  profileId: Profile! # uint256
  followNFTId: BigInt! # uint256
  from: Bytes! # address
  to: Bytes! # address
  timestamp: BigInt! # uint256
  transactionHash: Bytes!
}

type FollowNFTURISet @entity(immutable: true) {
  id: Bytes!
  profileId: Profile! # uint256
  followNFTURI: String! # string
  timestamp: BigInt! # uint256
  transactionHash: Bytes!
}

type Followed @entity(immutable: true) {
  id: Bytes!
  follower: Bytes! # address
  profileIds: [Profile!]! # uint256[]
  followModuleDatas: [Bytes!]! # bytes[]
  timestamp: BigInt! # uint256
  transactionHash: Bytes!
}

# type CollectModuleWhitelisted @entity(immutable: true) {
#   id: Bytes!
#   collectModule: Bytes! # address
#   whitelisted: Boolean! # bool
#   timestamp: BigInt! # uint256
#   blockNumber: BigInt!
#   blockTimestamp: BigInt!
#   transactionHash: Bytes!
# }

type CollectNFTTransferred @entity(immutable: true) {
  id: Bytes!
  profileId: Profile! # uint256
  pubId: BigInt! # uint256
  collectNFTId: BigInt! # uint256
  from: Bytes! # address
  to: Bytes! # address
  timestamp: BigInt! # uint256
  transactionHash: Bytes!
}

type Collected @entity(immutable: true) {
  id: Bytes!
  collector: Bytes! # address
  profileId: Profile! # uint256
  pubId: BigInt! # uint256
  rootProfileId: Profile! # uint256
  rootPubId: BigInt! # uint256
  timestamp: BigInt! # uint256
  transactionHash: Bytes!
}